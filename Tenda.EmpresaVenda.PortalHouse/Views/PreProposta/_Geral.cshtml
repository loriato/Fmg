@using Europa.Resources
@using Europa.Extensions
@using Tenda.Domain.EmpresaVenda.Enums
@model Tenda.EmpresaVenda.ApiService.Models.PreProposta.PrePropostaCreateDto

@Html.HiddenFor(reg => reg.PodeManterAssociacoes)
@Html.HiddenFor(reg => reg.PreProposta.Id)
@Html.HiddenFor(reg => reg.PreProposta.Cliente.Id)
@Html.HiddenFor(reg => reg.PreProposta.BreveLancamento.Id)
@Html.HiddenFor(reg => reg.PreProposta.BreveLancamento.Nome)
@Html.HiddenFor(reg => reg.PreProposta.PontoVenda.Id)
@Html.HiddenFor(reg => reg.PreProposta.IdTorre)
@Html.HiddenFor(reg => reg.PreProposta.NomeTorre)
@Html.HiddenFor(reg => reg.PreProposta.BreveLancamento.Empreendimento.Id)
@Html.HiddenFor(reg => reg.PreProposta.IdSuat)
@Html.HiddenFor(reg => reg.PreProposta.IdUnidadeSuat)
@*Html.HiddenFor(reg => reg.PreProposta.Regiao.Id)*@
@Html.HiddenFor(reg => reg.PreProposta.IsBreveLancamento)
@Html.HiddenFor(x => x.PreProposta.Elaborador.Id)
@Html.HiddenFor(x => x.PreProposta.EmpresaVenda.Id)
@Html.HiddenFor(x => x.PreProposta.EmpresaVenda.NomeFantasia)
@if (Model.PreProposta.SituacaoProposta.HasValue)
{
    @Html.HiddenFor(reg => reg.PreProposta.SituacaoProposta, new { @Value = (int)Model.PreProposta.SituacaoProposta })
}

@{
    var listaCidades = new List<SelectListItem>();
    if (Model.ListCidade.HasValue() && Model.ListCidade.Any())
    {
        listaCidades.AddRange(Model.ListCidade.Select(x => new SelectListItem
        {
            Text = x.Nome,
            Value = x.Id.ToString()
        }));
    }

    var listaPontosVenda = new List<SelectListItem>();
    if (Model.ListPontosVenda.HasValue() && Model.ListPontosVenda.Any())
    {
        listaPontosVenda.AddRange(Model.ListPontosVenda.Select(x => new SelectListItem
        {
            Text = x.Nome,
            Value = x.Id.ToString()
        }));
    }
}

<div class="row">
    <div class="form-group col-md-2">
        @Html.Label(GlobalMessages.Codigo)
        @Html.TextBoxFor(x => x.PreProposta.Codigo, new { @class = "form-control form-control-sm", @maxlength = 30, @readonly = "readonly" })
    </div>
    <div class="form-group col-md-5">
        @Html.Label(GlobalMessages.Cliente + "*")
        <div class="input-group">
            @Html.TextBox("PreProposta.Cliente.NomeCompleto", Model.PreProposta.Cliente?.NomeCompleto, new { @class = "form-control form-control-sm", @readonly = true, data_entity = "Cliente", data_id = Model.PreProposta.Cliente?.Id })
            @Html.HiddenFor(x => x.PreProposta.Cliente.Id)
            <div class="input-group-append">
                <button id="btn_select_cliente" type="button" class="btn btn-outline-secondary btn-sm py-0" onclick="Europa.Components.ClienteModal.AbrirModal(Europa.Controllers.PreProposta.SelectCliente)">
                    <i class="fas fa-search color-blue my-1" style="font-size: 18px;"></i>
                </button>
            </div>
        </div>
        @Html.HiddenFor(x => x.PreProposta.Cliente.Id)
    </div>
    <div class="form-group col-md-2">
        @Html.Label(GlobalMessages.Origem + "*")
        <div class="input-group">
            @Html.DropDownListFor(x => x.PreProposta.OrigemCliente, EnumHelper.GetSelectList(typeof(Tenda.Domain.EmpresaVenda.Enums.TipoOrigemClientePortalHouse)), "", new { @class = "form-control form-control-sm", onchange = "Europa.Controllers.PreProposta.OnChangeIndicacao()" })
            <span class="input-group-append">
                <button id="span_origem_cliente" disabled type="button" class="btn btn-outline-secondary btn-sm py-0" onclick="Europa.Controllers.PreProposta.AbrirModalOrigemIndicacao()">
                    <i class="fa fa-eye color-blue"></i>
                </button>
            </span>
        </div>
    </div>
    <div class="form-group col-md-3">
        @Html.Label(GlobalMessages.DataDaElaboracao)
        @Html.TextBoxFor(x => x.PreProposta.DataElaboracao, "{0:dd/MM/yyyy HH:mm}", new { @class = "form-control form-control-sm", @readonly = "readonly" })
    </div>
</div>
<div class="row">
    <div class="form-group col-md-3">
        @Html.Label(GlobalMessages.Loja + "*")
        @Html.TextBoxFor(x => x.PreProposta.EmpresaVenda.NomeFantasia, new { @class = "form-control form-control-sm", @maxlength = 30, @readonly = "readonly" })
    </div>
    <div class="form-group col-md-3">
        @Html.Label(GlobalMessages.PontoVenda + "*")
        @Html.DropDownListFor(reg => reg.PreProposta.PontoVenda, listaPontosVenda, GlobalMessages.Selecione, new { @class = "form-control form-control-sm", onchange = "Europa.Controllers.PreProposta.ChangePontoVenda()" })
    </div>
    <div class="form-group col-md-3">
        @Html.Label(GlobalMessages.AgenteVenda)
        @Html.HiddenFor(x => x.PreProposta.Corretor.Id)
        @Html.TextBoxFor(x => x.PreProposta.Corretor.Nome, new { @class = "form-control form-control-sm", @readonly = "readonly" })
    </div>
    <div class="form-group col-md-3">
        @Html.Label(GlobalMessages.StatusProposta)
        @Html.TextBoxFor(x => (x.SituacaoPrePropostaPortalHouse), new { @class = "form-control form-control-sm", @readonly = "readonly" })
    </div>
</div>
<div class="row">
    <div class="form-group col-md-6">
        @if (Model.PreProposta.Id.IsEmpty()
            || Model.PreProposta.SituacaoProposta != SituacaoProposta.EmElaboracao
            || Model.PreProposta.SituacaoProposta == SituacaoProposta.AguardandoFluxo
            || Model.PreProposta.SituacaoProposta == SituacaoProposta.EmElaboracao
            || Model.PreProposta.SituacaoProposta == SituacaoProposta.Condicionada)
        {
            Html.RenderAction("RenderBrevesLancamentos",Model.PreProposta);
        }
        else if (Model.PreProposta.HasValue() &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.EmAnaliseSimplificada &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.DocsInsuficientesSimplificado &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.AnaliseSimplificadaAprovada &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.SICAQComErro &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.Reprovada &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.AguardandoAnaliseSimplificada)
        {
            @Html.Label(GlobalMessages.EmpresasVendas_Produto + "*", new { @class = "control-label" })
            @Html.TextBoxFor(x => x.PreProposta.BreveLancamento.Nome, new { @class = "form-control form-control-sm", @disabled = "disabled" })
        }
    </div>
    <div class="form-group col-md-6">
        @Html.Label(GlobalMessages.Endereco)
        @Html.TextBoxFor(x => x.EnderecoBreveLancamento, new { @class = "form-control form-control-sm", @readonly = "readonly" })
    </div>
</div>
<div class="row">
    <div class="col-md-3 form-group">
        @if (Model.PreProposta.Id.IsEmpty()
            || Model.PreProposta.SituacaoProposta != SituacaoProposta.EmElaboracao
            || Model.PreProposta.SituacaoProposta == SituacaoProposta.AguardandoFluxo
            || Model.PreProposta.SituacaoProposta != SituacaoProposta.Reprovada
            || Model.PreProposta.SituacaoProposta == SituacaoProposta.EmElaboracao)
        {
            @Html.Label(GlobalMessages.Torre + "*")
            <select id="autocomplete_torre" name="autocomplete_torre" class="select2-container form-control" disabled="disabled"></select>
        }
        else if (Model.PreProposta.HasValue() &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.EmAnaliseSimplificada &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.DocsInsuficientesSimplificado &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.AnaliseSimplificadaAprovada &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.Condicionada &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.SICAQComErro &&
            Model.PreProposta.SituacaoProposta != SituacaoProposta.AguardandoAnaliseSimplificada)
        {
            @Html.Label(GlobalMessages.Torre + "*", new { @class = "control-label" })
            @Html.TextBoxFor(x => x.PreProposta.NomeTorre, new { @class = "form-control", @readonly = "readonly" })
        }
    </div>
    <div class="form-group col-md-3">
        @Html.Label(GlobalMessages.Observacao + " da Torre", new { @class = "control-label" })
        @Html.TextBoxFor(reg => reg.PreProposta.ObservacaoTorre, new { @class = "form-control form-control-sm", maxlength = 128 })
    </div>
    <div class="col-md-4 form-group">
        @Html.Label(GlobalMessages.FaixaUmMeio + "?", new { @class = "control-label" })
        <div class="col-md-24">
                @Html.RadioButtonFor(reg => reg.PreProposta.FaixaEv, true, new { id = "PreProposta_FaixaEv_Sim" }) <label style="margin-right: 30px;" class="control-label" for="PreProposta_FaixaEv_Sim">@GlobalMessages.Sim</label>
                @Html.RadioButtonFor(reg => reg.PreProposta.FaixaEv, false, new { id = "PreProposta_FaixaEv_Nao" }) <label class="control-label" for="PreProposta_FaixaEv_Nao">@GlobalMessages.Nao</label>
        </div>
    </div>
</div>
<div id="area_totais" class="row">
    @{
        Html.RenderPartial("_TotalFinanceiro");
    }
</div>

<script>
    Europa.String.FormatAsMoney($('#PreProposta_TotalDetalhamentoFinanceiro').val());
    Europa.String.FormatAsMoney($('#PreProposta_TotalItbiEmolumento').val());
    Europa.String.FormatAsMoney($('#PreProposta_Valor').val());
    Europa.String.FormatAsMoney($('#PreProposta_ParcelaAprovada').val());
    Europa.String.FormatAsMoney($('#PreProposta_ParcelaAprovadaPrevio').val());
    Europa.String.FormatAsMoney($('#PreProposta_ParcelaSolicitada').val());
</script>
@{
    Html.RenderPartial("_ModalOrigemIndicacao");
}